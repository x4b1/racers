// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service_test

import (
	"context"
	"github.com/xabi93/racers/internal"
	"github.com/xabi93/racers/internal/service"
	"sync"
)

// Ensure, that RacesRepositoryMock does implement service.RacesRepository.
// If this is not the case, regenerate this file with moq.
var _ service.RacesRepository = &RacesRepositoryMock{}

// RacesRepositoryMock is a mock implementation of service.RacesRepository.
//
//     func TestSomethingThatUsesRacesRepository(t *testing.T) {
//
//         // make and configure a mocked service.RacesRepository
//         mockedRacesRepository := &RacesRepositoryMock{
//             AllFunc: func(ctx context.Context) ([]racers.Race, error) {
// 	               panic("mock out the All method")
//             },
//             ExistsFunc: func(ctx context.Context, race racers.Race) (bool, error) {
// 	               panic("mock out the Exists method")
//             },
//             GetFunc: func(ctx context.Context, id racers.RaceID) (racers.Race, error) {
// 	               panic("mock out the Get method")
//             },
//             SaveFunc: func(ctx context.Context, race racers.Race) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedRacesRepository in code that requires service.RacesRepository
//         // and then make assertions.
//
//     }
type RacesRepositoryMock struct {
	// AllFunc mocks the All method.
	AllFunc func(ctx context.Context) ([]racers.Race, error)

	// ExistsFunc mocks the Exists method.
	ExistsFunc func(ctx context.Context, race racers.Race) (bool, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id racers.RaceID) (racers.Race, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, race racers.Race) error

	// calls tracks calls to the methods.
	calls struct {
		// All holds details about calls to the All method.
		All []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Exists holds details about calls to the Exists method.
		Exists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Race is the race argument value.
			Race racers.Race
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID racers.RaceID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Race is the race argument value.
			Race racers.Race
		}
	}
	lockAll    sync.RWMutex
	lockExists sync.RWMutex
	lockGet    sync.RWMutex
	lockSave   sync.RWMutex
}

// All calls AllFunc.
func (mock *RacesRepositoryMock) All(ctx context.Context) ([]racers.Race, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockAll.Lock()
	mock.calls.All = append(mock.calls.All, callInfo)
	mock.lockAll.Unlock()
	if mock.AllFunc == nil {
		var (
			out1 []racers.Race
			out2 error
		)
		return out1, out2
	}
	return mock.AllFunc(ctx)
}

// AllCalls gets all the calls that were made to All.
// Check the length with:
//     len(mockedRacesRepository.AllCalls())
func (mock *RacesRepositoryMock) AllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockAll.RLock()
	calls = mock.calls.All
	mock.lockAll.RUnlock()
	return calls
}

// Exists calls ExistsFunc.
func (mock *RacesRepositoryMock) Exists(ctx context.Context, race racers.Race) (bool, error) {
	callInfo := struct {
		Ctx  context.Context
		Race racers.Race
	}{
		Ctx:  ctx,
		Race: race,
	}
	mock.lockExists.Lock()
	mock.calls.Exists = append(mock.calls.Exists, callInfo)
	mock.lockExists.Unlock()
	if mock.ExistsFunc == nil {
		var (
			out1 bool
			out2 error
		)
		return out1, out2
	}
	return mock.ExistsFunc(ctx, race)
}

// ExistsCalls gets all the calls that were made to Exists.
// Check the length with:
//     len(mockedRacesRepository.ExistsCalls())
func (mock *RacesRepositoryMock) ExistsCalls() []struct {
	Ctx  context.Context
	Race racers.Race
} {
	var calls []struct {
		Ctx  context.Context
		Race racers.Race
	}
	mock.lockExists.RLock()
	calls = mock.calls.Exists
	mock.lockExists.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RacesRepositoryMock) Get(ctx context.Context, id racers.RaceID) (racers.Race, error) {
	callInfo := struct {
		Ctx context.Context
		ID  racers.RaceID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			out1 racers.Race
			out2 error
		)
		return out1, out2
	}
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRacesRepository.GetCalls())
func (mock *RacesRepositoryMock) GetCalls() []struct {
	Ctx context.Context
	ID  racers.RaceID
} {
	var calls []struct {
		Ctx context.Context
		ID  racers.RaceID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RacesRepositoryMock) Save(ctx context.Context, race racers.Race) error {
	callInfo := struct {
		Ctx  context.Context
		Race racers.Race
	}{
		Ctx:  ctx,
		Race: race,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			out1 error
		)
		return out1
	}
	return mock.SaveFunc(ctx, race)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedRacesRepository.SaveCalls())
func (mock *RacesRepositoryMock) SaveCalls() []struct {
	Ctx  context.Context
	Race racers.Race
} {
	var calls []struct {
		Ctx  context.Context
		Race racers.Race
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Ensure, that TeamsRepositoryMock does implement service.TeamsRepository.
// If this is not the case, regenerate this file with moq.
var _ service.TeamsRepository = &TeamsRepositoryMock{}

// TeamsRepositoryMock is a mock implementation of service.TeamsRepository.
//
//     func TestSomethingThatUsesTeamsRepository(t *testing.T) {
//
//         // make and configure a mocked service.TeamsRepository
//         mockedTeamsRepository := &TeamsRepositoryMock{
//             ByMemberFunc: func(ctx context.Context, id racers.UserID) (*racers.Team, error) {
// 	               panic("mock out the ByMember method")
//             },
//             GetFunc: func(ctx context.Context, id racers.TeamID) (racers.Team, error) {
// 	               panic("mock out the Get method")
//             },
//             SaveFunc: func(ctx context.Context, team racers.Team) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedTeamsRepository in code that requires service.TeamsRepository
//         // and then make assertions.
//
//     }
type TeamsRepositoryMock struct {
	// ByMemberFunc mocks the ByMember method.
	ByMemberFunc func(ctx context.Context, id racers.UserID) (*racers.Team, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id racers.TeamID) (racers.Team, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, team racers.Team) error

	// calls tracks calls to the methods.
	calls struct {
		// ByMember holds details about calls to the ByMember method.
		ByMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID racers.UserID
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID racers.TeamID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Team is the team argument value.
			Team racers.Team
		}
	}
	lockByMember sync.RWMutex
	lockGet      sync.RWMutex
	lockSave     sync.RWMutex
}

// ByMember calls ByMemberFunc.
func (mock *TeamsRepositoryMock) ByMember(ctx context.Context, id racers.UserID) (*racers.Team, error) {
	callInfo := struct {
		Ctx context.Context
		ID  racers.UserID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockByMember.Lock()
	mock.calls.ByMember = append(mock.calls.ByMember, callInfo)
	mock.lockByMember.Unlock()
	if mock.ByMemberFunc == nil {
		var (
			out1 *racers.Team
			out2 error
		)
		return out1, out2
	}
	return mock.ByMemberFunc(ctx, id)
}

// ByMemberCalls gets all the calls that were made to ByMember.
// Check the length with:
//     len(mockedTeamsRepository.ByMemberCalls())
func (mock *TeamsRepositoryMock) ByMemberCalls() []struct {
	Ctx context.Context
	ID  racers.UserID
} {
	var calls []struct {
		Ctx context.Context
		ID  racers.UserID
	}
	mock.lockByMember.RLock()
	calls = mock.calls.ByMember
	mock.lockByMember.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TeamsRepositoryMock) Get(ctx context.Context, id racers.TeamID) (racers.Team, error) {
	callInfo := struct {
		Ctx context.Context
		ID  racers.TeamID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			out1 racers.Team
			out2 error
		)
		return out1, out2
	}
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTeamsRepository.GetCalls())
func (mock *TeamsRepositoryMock) GetCalls() []struct {
	Ctx context.Context
	ID  racers.TeamID
} {
	var calls []struct {
		Ctx context.Context
		ID  racers.TeamID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *TeamsRepositoryMock) Save(ctx context.Context, team racers.Team) error {
	callInfo := struct {
		Ctx  context.Context
		Team racers.Team
	}{
		Ctx:  ctx,
		Team: team,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			out1 error
		)
		return out1
	}
	return mock.SaveFunc(ctx, team)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedTeamsRepository.SaveCalls())
func (mock *TeamsRepositoryMock) SaveCalls() []struct {
	Ctx  context.Context
	Team racers.Team
} {
	var calls []struct {
		Ctx  context.Context
		Team racers.Team
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Ensure, that UsersGetterMock does implement service.UsersGetter.
// If this is not the case, regenerate this file with moq.
var _ service.UsersGetter = &UsersGetterMock{}

// UsersGetterMock is a mock implementation of service.UsersGetter.
//
//     func TestSomethingThatUsesUsersGetter(t *testing.T) {
//
//         // make and configure a mocked service.UsersGetter
//         mockedUsersGetter := &UsersGetterMock{
//             CurrentFunc: func(ctx context.Context) racers.User {
// 	               panic("mock out the Current method")
//             },
//             GetFunc: func(ctx context.Context, id racers.UserID) (racers.User, error) {
// 	               panic("mock out the Get method")
//             },
//         }
//
//         // use mockedUsersGetter in code that requires service.UsersGetter
//         // and then make assertions.
//
//     }
type UsersGetterMock struct {
	// CurrentFunc mocks the Current method.
	CurrentFunc func(ctx context.Context) racers.User

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id racers.UserID) (racers.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Current holds details about calls to the Current method.
		Current []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID racers.UserID
		}
	}
	lockCurrent sync.RWMutex
	lockGet     sync.RWMutex
}

// Current calls CurrentFunc.
func (mock *UsersGetterMock) Current(ctx context.Context) racers.User {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCurrent.Lock()
	mock.calls.Current = append(mock.calls.Current, callInfo)
	mock.lockCurrent.Unlock()
	if mock.CurrentFunc == nil {
		var (
			out1 racers.User
		)
		return out1
	}
	return mock.CurrentFunc(ctx)
}

// CurrentCalls gets all the calls that were made to Current.
// Check the length with:
//     len(mockedUsersGetter.CurrentCalls())
func (mock *UsersGetterMock) CurrentCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCurrent.RLock()
	calls = mock.calls.Current
	mock.lockCurrent.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *UsersGetterMock) Get(ctx context.Context, id racers.UserID) (racers.User, error) {
	callInfo := struct {
		Ctx context.Context
		ID  racers.UserID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			out1 racers.User
			out2 error
		)
		return out1, out2
	}
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedUsersGetter.GetCalls())
func (mock *UsersGetterMock) GetCalls() []struct {
	Ctx context.Context
	ID  racers.UserID
} {
	var calls []struct {
		Ctx context.Context
		ID  racers.UserID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
