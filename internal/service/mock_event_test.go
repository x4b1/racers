// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service_test

import (
	"context"
	"github.com/xabi93/racers/internal/service"
	"sync"
)

// Ensure, that EventBusMock does implement service.EventBus.
// If this is not the case, regenerate this file with moq.
var _ service.EventBus = &EventBusMock{}

// EventBusMock is a mock implementation of service.EventBus.
//
//     func TestSomethingThatUsesEventBus(t *testing.T) {
//
//         // make and configure a mocked service.EventBus
//         mockedEventBus := &EventBusMock{
//             PublishFunc: func(ctx context.Context, events ...service.Event) error {
// 	               panic("mock out the Publish method")
//             },
//         }
//
//         // use mockedEventBus in code that requires service.EventBus
//         // and then make assertions.
//
//     }
type EventBusMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, events ...service.Event) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Events is the events argument value.
			Events []service.Event
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *EventBusMock) Publish(ctx context.Context, events ...service.Event) error {
	callInfo := struct {
		Ctx    context.Context
		Events []service.Event
	}{
		Ctx:    ctx,
		Events: events,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	if mock.PublishFunc == nil {
		var (
			out1 error
		)
		return out1
	}
	return mock.PublishFunc(ctx, events...)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedEventBus.PublishCalls())
func (mock *EventBusMock) PublishCalls() []struct {
	Ctx    context.Context
	Events []service.Event
} {
	var calls []struct {
		Ctx    context.Context
		Events []service.Event
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
