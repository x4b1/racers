// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/xabi93/racers/internal/storage/postgres/ent/predicate"
	"github.com/xabi93/racers/internal/storage/postgres/ent/race"
	"github.com/xabi93/racers/internal/storage/postgres/ent/user"
)

// RaceUpdate is the builder for updating Race entities.
type RaceUpdate struct {
	config
	hooks      []Hook
	mutation   *RaceMutation
	predicates []predicate.Race
}

// Where adds a new predicate for the builder.
func (ru *RaceUpdate) Where(ps ...predicate.Race) *RaceUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetName sets the name field.
func (ru *RaceUpdate) SetName(s string) *RaceUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetDate sets the date field.
func (ru *RaceUpdate) SetDate(t time.Time) *RaceUpdate {
	ru.mutation.SetDate(t)
	return ru
}

// AddCompetitorIDs adds the competitors edge to User by ids.
func (ru *RaceUpdate) AddCompetitorIDs(ids ...string) *RaceUpdate {
	ru.mutation.AddCompetitorIDs(ids...)
	return ru
}

// AddCompetitors adds the competitors edges to User.
func (ru *RaceUpdate) AddCompetitors(u ...*User) *RaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddCompetitorIDs(ids...)
}

// Mutation returns the RaceMutation object of the builder.
func (ru *RaceUpdate) Mutation() *RaceMutation {
	return ru.mutation
}

// ClearCompetitors clears all "competitors" edges to type User.
func (ru *RaceUpdate) ClearCompetitors() *RaceUpdate {
	ru.mutation.ClearCompetitors()
	return ru
}

// RemoveCompetitorIDs removes the competitors edge to User by ids.
func (ru *RaceUpdate) RemoveCompetitorIDs(ids ...string) *RaceUpdate {
	ru.mutation.RemoveCompetitorIDs(ids...)
	return ru
}

// RemoveCompetitors removes competitors edges to User.
func (ru *RaceUpdate) RemoveCompetitors(u ...*User) *RaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveCompetitorIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RaceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RaceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RaceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RaceUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := race.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ru *RaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   race.Table,
			Columns: race.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: race.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: race.FieldName,
		})
	}
	if value, ok := ru.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: race.FieldDate,
		})
	}
	if ru.mutation.CompetitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   race.CompetitorsTable,
			Columns: race.CompetitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCompetitorsIDs(); len(nodes) > 0 && !ru.mutation.CompetitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   race.CompetitorsTable,
			Columns: race.CompetitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CompetitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   race.CompetitorsTable,
			Columns: race.CompetitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{race.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RaceUpdateOne is the builder for updating a single Race entity.
type RaceUpdateOne struct {
	config
	hooks    []Hook
	mutation *RaceMutation
}

// SetName sets the name field.
func (ruo *RaceUpdateOne) SetName(s string) *RaceUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetDate sets the date field.
func (ruo *RaceUpdateOne) SetDate(t time.Time) *RaceUpdateOne {
	ruo.mutation.SetDate(t)
	return ruo
}

// AddCompetitorIDs adds the competitors edge to User by ids.
func (ruo *RaceUpdateOne) AddCompetitorIDs(ids ...string) *RaceUpdateOne {
	ruo.mutation.AddCompetitorIDs(ids...)
	return ruo
}

// AddCompetitors adds the competitors edges to User.
func (ruo *RaceUpdateOne) AddCompetitors(u ...*User) *RaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddCompetitorIDs(ids...)
}

// Mutation returns the RaceMutation object of the builder.
func (ruo *RaceUpdateOne) Mutation() *RaceMutation {
	return ruo.mutation
}

// ClearCompetitors clears all "competitors" edges to type User.
func (ruo *RaceUpdateOne) ClearCompetitors() *RaceUpdateOne {
	ruo.mutation.ClearCompetitors()
	return ruo
}

// RemoveCompetitorIDs removes the competitors edge to User by ids.
func (ruo *RaceUpdateOne) RemoveCompetitorIDs(ids ...string) *RaceUpdateOne {
	ruo.mutation.RemoveCompetitorIDs(ids...)
	return ruo
}

// RemoveCompetitors removes competitors edges to User.
func (ruo *RaceUpdateOne) RemoveCompetitors(u ...*User) *RaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveCompetitorIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RaceUpdateOne) Save(ctx context.Context) (*Race, error) {
	var (
		err  error
		node *Race
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RaceUpdateOne) SaveX(ctx context.Context) *Race {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RaceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RaceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RaceUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := race.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ruo *RaceUpdateOne) sqlSave(ctx context.Context) (_node *Race, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   race.Table,
			Columns: race.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: race.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Race.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: race.FieldName,
		})
	}
	if value, ok := ruo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: race.FieldDate,
		})
	}
	if ruo.mutation.CompetitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   race.CompetitorsTable,
			Columns: race.CompetitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCompetitorsIDs(); len(nodes) > 0 && !ruo.mutation.CompetitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   race.CompetitorsTable,
			Columns: race.CompetitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CompetitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   race.CompetitorsTable,
			Columns: race.CompetitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Race{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{race.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
