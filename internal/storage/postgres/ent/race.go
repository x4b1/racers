// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/xabi93/racers/internal/storage/postgres/ent/race"
)

// Race is the model entity for the Race schema.
type Race struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RaceQuery when eager-loading is set.
	Edges RaceEdges `json:"edges"`
}

// RaceEdges holds the relations/edges for other nodes in the graph.
type RaceEdges struct {
	// Competitors holds the value of the competitors edge.
	Competitors []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CompetitorsOrErr returns the Competitors value or an error if the edge
// was not loaded in eager-loading.
func (e RaceEdges) CompetitorsOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Competitors, nil
	}
	return nil, &NotLoadedError{edge: "competitors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Race) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullString{}, // name
		&sql.NullTime{},   // date
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Race fields.
func (r *Race) assignValues(values ...interface{}) error {
	if m, n := len(values), len(race.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		r.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		r.Name = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[1])
	} else if value.Valid {
		r.Date = value.Time
	}
	return nil
}

// QueryCompetitors queries the competitors edge of the Race.
func (r *Race) QueryCompetitors() *UserQuery {
	return (&RaceClient{config: r.config}).QueryCompetitors(r)
}

// Update returns a builder for updating this Race.
// Note that, you need to call Race.Unwrap() before calling this method, if this Race
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Race) Update() *RaceUpdateOne {
	return (&RaceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Race) Unwrap() *Race {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Race is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Race) String() string {
	var builder strings.Builder
	builder.WriteString("Race(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", date=")
	builder.WriteString(r.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Races is a parsable slice of Race.
type Races []*Race

func (r Races) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
